Phidget Python Module Changelog
================================

May 2nd - version 2.1.4
=============================

All Files
---------
- Fixed a bug in the module that caused event handler callbacks to cause segmentation faults and bus errors on Mac(darwin) and Linux.
- Tweaked some of the class members "private" as they should not be used outside of the module.
- Modified the exception handling output in the examples to read "Phidget Exception" rather that "Phidget Error" to differentiate them
  from Phidget Error event handler messages.
- Modified user input reading to use a normal sys.stdin.read(1) looking for simply an Enter key press to terminate the application as opposed
  to the try - except loop looking for keyboard interrupts as this didn't work in Darwin very well. (With the threading working properly, this
  try-except loop is unnecessary)

April 15th - version 2.1.4
=============================

All files
---------
- updated the versioning system to be more in line with the other APIs
- Modified the way threading was being handled.  The threading module is now imported in the Phidgets module classes themselves
  basically causeing the module to handle threading so you no longer have to.  threading no longer needs to be imported in your programs,
  and you no longer need to run your code in it's own thread.  Please look over the newly updated examples to see how this change should affect your code.

Phidget
-------
- Removed getDeviceStatus as isAttached does the same thing and is more in line with other APIs
- Removed getServerStatus as isAttachedToServer does the same thing and is more in line with other APIs
- Brought in the code giving access to the Phidget logging features in the C Library

Accelerometer
-------------
- changed getNumAxis to getAxisCount to reflect changes in the C API and to be more in line with other APIs

Encoder
-------
- changed getEncoderPositon and setEncoderPosition to getPosition and setPosition to reflect changed in the C API
- changed setOnEncoderPositionChangeHandler to setOnPositionChangeHandler to reflect changes in the C API
- changed getInputState to return a boolean instead of an int to be more in line with other APIs
- changed getNumEncoders to getEncoderCount to reflect changes in the C API and to be more in line with other APIs
- changed getNumInputs to getInputCount to reflect changes in the C API and to be more in line with other APIs

InterfaceKit
-------------
- changed getInputState to return a boolean instead of an int to be more in line with other APIs
- changed getOutputState to return a boolean instead of an int to be more in line with other APIs
- changed setOutputState to take a boolean instead of an int for desired state to be more inline with other APIs
- changed getRatiometric to return a boolean instead of an int to be more inline with other APIs
- changed setRatiometric to take a boolean instead of an int for desired state to be more inline with other APIs
- changed getNumInputs to getInputCount to reflect changes in the C API and to be more in line with other APIs
- changed getNumSensors to getSensorCount to reflect changes in the C API and to be more in line with other APIs
- changed getNumOutputs to getOutputCount to reflect changes in the C API and to be more in line with other APIs

LED
----
- changed getNumLEDs to getLEDCount to reflect changes in the  C API and to be more in line with other APIs

MotorControl
-------------

- changed getInputState to return a boolean instead of an int to be more in line with other APIs
- Changed getNumMotors to getMotorCount to be more consistent with the other API's
- changed getNumInputs to getInputCount to reflect changes in the C API and to be more in line with other APIs
- changed getMotorSpeed and setMotorSpeed to getVelocity and setVelocity to reflect changes in the C API
- changed setOnMotorChangeHandler to setOnVelocityChangeHandler to reflect changes to the C API

RFID
-----
- changed getNumOutputs to getOutputCount to reflect changes in the C API and to be more in line with other APIs
- changed getOutputState to return a boolean instead of an int to be more in line with other APIs
- changed setOutputState to take a boolean instead of an int for desired state to be more inline with other APIs
- changed getAntennaOn to return a boolean instead of an int to be more in line with other APIs
- changed setAntennaOn to take a boolean instead of an int for desired state to be more inline with other APIs
- changed getLEDOn to return a boolean instead of an int to be more in line with other APIs
- changed setLEDOn to take a boolean instead of an int for desired state to be more inline with other APIs
- changed getTagStatus to return a boolean instead of an int to be more in line with other APIs


Servo
------
- Changed getNumMotors to getMotorCount to reflect changes in the C API and to be more in line with other APIs
- changed getMotorPosition and setMotorPosition to getPosition and setPosition to reflect changes in the C API
- changed getMotorPositionMax and getMotorPositionMin to getPositionMax and getPositionMin to reflect changed is the C API
- changed setOnMotorPositionChangeHandler to setOnPositionChangeHandler to reflect changes in the C API
- changed getMotorStatus and setMotorStatus to getEngaged and setEngaged to reflect changes in the C API
	- Also made the return type for getEngaged to be a boolean rather than an integer value for simplicity and to match other APIs

Stepper
--------
- Created the class and example for the library functions for controlling the Phidget Stepper

TemperatureSensor
-----------------
- changed getNumTemperatureInputs to getTemperatureInputCount to reflect changes in the C API and to be more in line with other APIs

TextLCD
--------
- changed getNumRows to getRowCount to reflect changes in the C API and to be more in line with other APIs
- changed getNumColumns to getColumnCount to reflect changes in the C API and to be more in line with other APIs
- changed getBacklight to return a boolean instead of an int to be more in line with other APIs
- changed setBacklight to take a boolean instead of an int for desired state to be more inline with other APIs
- changed getCursorOn and setCursorOn to getCursor and setCursor in order to be more in line with other APIs
- changed getCursor to return a boolean instead of an int to be more in line with other APIs
- changed setCursor to take a boolean instead of an int for desired state to be more inline with other APIs
- changed getCursorBlink to return a boolean instead of an int to be more in line with other APIs
- changed setCursorBlink to take a boolean instead of an int for desired state to be more inline with other APIs
- fixed up the code for setCustomCharacter a bit, can now supply index 0-7 for setting the 8 custom characters

Dictionary
-----------
- Commented out getKey function as it is not quite implemented yet and want to try to avoid any problems
- changed getServerStatus to isAttachedToServer and changed it to return a boolean rather than an int to be more in line with other APIs

Manager
--------
- changed getServerStatus to isAttachedToServer and changed it to return a boolean rather than an int to be more inline with other APIs

Events
--------
- changed value to state in InputChangeEventArgs and OutputChangeEventArgs, and this property now contains the boolean state value of that input/output
- added reason property to the KeyChangeEventArgs so that the user can determine the reason the key changed (to help differentiate change and removal mostly)